<?php
/**
 * Created by PhpStorm.
 * User: dale.guo
 * Date: 11/25/16
 * Time: 4:10 PM
 */
use Drupal\user\Entity\User;
use Drupal\profile\Entity\Profile;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\votingapi\Entity\Vote;

use Drupal\Core\Queue\QueueFactory;
use Drupal\Core\Queue\QueueInterface;


//cron set new user pic url field then delete!!!
function wxapi_cron() {
    // https://api.drupal.org/api/drupal/core!includes!database.inc/function/db_select/8.2.x
    $query = \Drupal::database()->select('user__field_user_picture_url', 't');
    $query->addField('t', 'entity_id');
    $query->condition('t.bundle', 'user');
    $subquery_result = array_keys($query->execute()->fetchAllAssoc('entity_id'));
    if(empty($subquery_result)) $subquery_result=[0];

    $query = \Drupal::database()->select('users', 't');
    $query->addField('t', 'uid');
    // $query->condition('t.bundle', 'wechat_account_data');
    $query->condition('t.uid', $subquery_result, 'NOT IN');
    $query->range(0, 1000);
    $uids = array_keys($query->execute()->fetchAllAssoc('uid'));

    foreach ($uids as $uid) {
        $user = User::load($uid);
        $profile_type = 'wechat_account_data';
        /* @var $profile Profile */
        $profile = \Drupal::entityTypeManager()->getStorage('profile')
            ->loadByUser($user, $profile_type);
        if ($profile && $profile->get('field_mp_accounts_hd_head_img')->value!=$user->get('field_user_picture_url')->value) {
            \Drupal::logger('wxapi_cron')->notice($uid);
            $user->set('field_user_picture_url', $profile->get('field_mp_accounts_hd_head_img')->value);
            $user->save();
            \Drupal::logger('wxapi_account_cron')->notice($uid);
        }else{
          $profile_type = 'wechat_user_data';
          /* @var $profile Profile */
          $profile = \Drupal::entityTypeManager()->getStorage('profile')
              ->loadByUser($user, $profile_type);
          if ($profile && $profile->get('field_wxuser_headimgurl')->value!=$user->get('field_user_picture_url')->value) {
              \Drupal::logger('wxapi_cron')->notice($uid);
              $user->set('field_user_picture_url', $profile->get('field_wxuser_headimgurl')->value);
              $user->save();
          }else{
            // \Drupal::logger('wxapi_cron_delete')->notice($uid);
            // $user->delete();
          }
        }
    }

    // $query = \Drupal::database()->select('user__field_user_openids', 't');
    // $query->addField('t', 'entity_id');
    // $query->condition('t.bundle', 'user');
    // $query->condition('t.entity_id', $subquery_result, 'NOT IN');
    // $query->range(0, 100);
    // $uids = array_keys($query->execute()->fetchAllAssoc('entity_id'));
    // foreach ($uids as $uid) {
    //     $user = User::load($uid);
    //     $profile_type = 'wechat_user_data';
    //     /* @var $profile Profile */
    //     $profile = \Drupal::entityTypeManager()->getStorage('profile')
    //         ->loadByUser($user, $profile_type);
    //     if ($profile && $profile->get('field_wxuser_headimgurl')->value!=$user->get('field_user_picture_url')->value) {
    //         // \Drupal::logger('wxapi_cron')->notice($uid);
    //         $user->set('field_user_picture_url', $profile->get('field_wxuser_headimgurl')->value);
    //         $user->save();
    //     }
    // }
    // return $uids; 
}

function wxapi_entity_presave(Drupal\Core\Entity\EntityInterface $node){
    if(!$node->id()){ //for insert or udpate!
        $uri = FALSE;
        if($node->bundle()=='album' && $node->hasField('field_from_url') && !$node->get('field_from_url')->isEmpty()){
            $field_from_url = $node->get('field_from_url')->getValue();
            $uri = $field_from_url[0]['uri'];
        }
        if (strpos($uri, 'youtube.com/') !== FALSE ) {
          $type = $node->get('field_bundle_type')->value;
          $field_bundle_author = $node->get('field_bundle_author')->getValue();
          $uid = 1;
          if(isset($field_bundle_author[0]['target_id']) && $field_bundle_author[0]['target_id']){
            $uid = $field_bundle_author[0]['target_id'];
          }
          $field_tag_tid = FALSE;
          $field_tags = $node->get('field_tags')->getValue();
          if(isset($field_tags[0]['target_id']) && $field_tags[0]['target_id']){
            $field_tag_tid = $field_tags[0]['target_id'];
          }
          $target_ids = wxapi_graceYoutube($uri,$type,$uid,$field_tag_tid);
          foreach($target_ids as $target_id){
              // $node->field_nodes_references[] = $target_id;
            $node->field_nodes_reference->appendItem($target_id);
          }
        }
    }
}




function wxapi_graceYoutube($url='https://www.youtube.com/watch?v=y4KJegd8inI&list=PLgFvTLP0QRDsUhs2GrsWS6eRUi4GwZtGQ',$type="grace",$uid=1,$tid=FALSE){
    //1.get html from serverless : post url to 
    $uri = 'https://sls-prod.yongbuzhixi.com/html/post';
    try {
      $response = \Drupal::httpClient()->post($uri,[
        'json'=> [
            'url'=>$url
        ]
      ]);
      //array('headers' => array('Accept' => 'application/json'))
      $data = (string) $response->getBody();
      if (empty($data)) {
        \Drupal::logger('wxapi_graceYoutube')->notice('sls get no html error');
        return FALSE;
      }
      $str_html = json_decode($data)->output;
      // print_r($str_html);die();
      $html = str_get_html($str_html);
      $output=[];

      //grace
      foreach($html->find('.pl-video') as $element) {
          if (isset($element->attr['data-video-id']) && isset($element->attr['data-title'])) {
            $youtube_vid= $element->attr['data-video-id'];
            $title= $element->attr['data-title'];
            // $title = '20131116 恩典365 - 婚姻家庭系列 - 真愛要等待01 : 持守聖潔得著祝福';
            $created = REQUEST_TIME;
            if($type=='grace'){
              preg_match('/\d{8}/', $title,$matches);
              $date  = $matches[0];
              $time_str = implode('-',[substr($date, 0,4),substr($date, 4,2),substr($date, 6,2) ]) . ' 00:00:00';
              $created =  strtotime($time_str);
            }
            //youtube_vid
            $newNode = [
                'type'             => $type,
                'created'          => $created,
                'changed'          => $created,
                'uid'              => $uid, //恩典365基督之家 https://api.yongbuzhixi.com/user/46
                'title'            => $title,
                // An array with taxonomy terms.http://ybzxvideo.b0.upaiyun.com/youtube/201801/Nl4ak6oCOHU.mp4
                'field_video_url' => "http://ybzxvideo.b0.upaiyun.com/youtube/$youtube_vid.mp4",
                'field_youtube_vid' => [$youtube_vid]
              ];
              if($tid) $newNode['field_tags'][] = ['target_id'=>$tid];
              $node = Node::create($newNode);
              $node->save();
              \Drupal::logger('wxapi_graceYoutube_getNode')->notice($node->id() . '=>' . $title);
              //TODO add to queue
              /** @var QueueFactory $queue_factory */
              $queue_factory = \Drupal::service('queue');
              /** @var QueueInterface $queue */
              $queue = $queue_factory->get('cron_youtube_publisher');
              $item = new \stdClass();
              $item->vid = $youtube_vid;
              // $item->nid = $node->id();
              $queue->createItem($item);
              // $queue = $queue_factory->get('cron_youtube_publisher');
              // dpm($queue->numberOfItems());
              // while($item = $queue->claimItem()) {
              //   dpm($item->data->vid);
              // }
              //end queue
              if($type=='grace'){//365
                \Drupal::service('path.alias_storage')->save("/node/" . $node->id(), "/$type/$date", "und");
              }
              $output[]=$node->id();
            }

        }
        return $output;
    }
    catch (RequestException $e) {
      return FALSE;
    }
    // 2.str2html get dom
}

/**
 * Get the voting results for an entity.
 *
 * @param string $entity_type_id
 *   The type of entity, e.g. 'node'.
 * @param int $entity_id
 *   The ID of the entity.
 *
 * @return array
 *   An nested array
 * @see \Drupal\votingapi\VoteResultFunctionManager->getResults()
 */
// public function getResults($entity_type_id, $entity_id) {
function get_vote($entity_id,$entity_type_id='node'){
  $results = array();
  $result = db_select('votingapi_result', 'v')
    ->fields('v', array('type', 'function', 'value'))
    ->condition('entity_type', $entity_type_id)
    ->condition('entity_id', $entity_id)
    ->execute();
  while ($row = $result->fetchAssoc()) {
    $results[$row['type']][$row['function']] = $row['value'];
  }
  return $results;
}
function is_voted($nid,$uid){
  $results = array();
  $result = db_select('votingapi_vote', 'v')
    ->fields('v', array('id'))
    ->condition('user_id', $uid)
    ->condition('entity_id', $nid)
    ->condition('entity_type', 'node')
    //field_name=>'field_vote'
    ->execute()->fetchField();
  $re = get_vote($nid);
  $votes = 0;
  if(isset($re['useful']['vote_sum']))  $votes = $re['useful']['vote_sum']?:0;
  $return = ['votes'=>$votes];
  $return['is_voted']=0;
  if($result) {
    $return['is_voted']=1;
  }
  return $return;
}

// @see https://www.drupal.org/project/votingapi/issues/2846033
function save_vote($nid,$uid) {
  $vote = Vote::create(['type' => 'useful']);
  $vote->setVotedEntityId($nid);
  $vote->setVotedEntityType('node');
  $vote->setValueType('points');
  $vote->setValue(1);
  $vote->setOwnerId($uid);
  // $vote->setSource(array('192.168.1.1'));
  $vote->save();

  $re = get_vote($nid);
  if(isset($re['useful']['vote_sum'])) return $re['useful']['vote_sum']?:0;
  return 0;
}
